################################################################################
## Parallel Makefile template for fortran programs with manually resolved module
## dependencies. Run as 'make -j N', N: max number of concurent build processes.
## Just '-j' for unlimited parallel build (if the computer needs jamming).
## Usual suspects: all(default), clean
##
## Project description shall be provided in rules.mk
##
## Dimitar Pashov <d.pashov@gmail.com> 3-Mar-2012
##
##
## Better make a backup before messing with this section and keep a tab with
## http://www.gnu.org/software/make/manual/ handy!

# This can change the tab fronting all recipes to anything one fancies..
# .RECIPEPREFIX =   

# @: supress echoing the recipe command (-s, --silent on a global scale)
# -: ignore the exit status of the recipe command (-i, --ignore-errors on a global scale)
# +: execute this recipe command even if the -n (--dry-run) option has been given

srcpath ?= $(dir $(firstword $(MAKEFILE_LIST)))

# These shenanigans are just to avoid having to have  bldpath ?= path/to/build instead of  bldpath := path/to/build.
# If ?= is used then only the "include flags.mk" line is necessary from the following.
bldpath_save := $(bldpath)
include flags.mk
ifeq ($(realpath $(srcpath)),$(realpath $(CURDIR)))
  ifdef bldpath_save
    bldpath := $(bldpath_save)
  endif
else
  bldpath := .
endif



bldpath ?= .

# Flexible "out of tree" build thanks to Paul D. Smith <psmith@gnu.org>
# http://mad-scientist.net/make/multi-arch.html
ifneq ($(realpath $(bldpath)),$(realpath $(CURDIR)))
# ifneq (a,a)
#   include $(mkfpath)/otree.mk
# Flexible "out of tree" build thanks to Paul D. Smith <psmith@gnu.org>
# http://mad-scientist.net/make/multi-arch.html

.SUFFIXES:

.PHONY: clean $(bldpath)

$(bldpath): $(bldpath)/flags.mk
# 	+@[ -d $@ ] || mkdir -p $@
# 	+@$(MAKE) --no-print-directory -C $@ -f $(abspath $(srcpath))/Makefile -I $(abspath $(srcpath)) $(MAKECMDGOALS) srcpath=$(abspath $(srcpath)) bldpath=$(abspath $(bldpath))
	+[ -d $@ ] || mkdir -p $@
	$(MAKE) -C $@ -f $(abspath $(srcpath))/Makefile -I $(abspath $(srcpath)) $(MAKECMDGOALS) srcpath=$(abspath $(srcpath)) bldpath=$(abspath $(bldpath))

Makefile:;


%.mk :: ;

% :: $(bldpath); :

clean:
	rm -rf $(bldpath)

.DEFAULT_GOAL := $(bldpath)

else
# Where to put the .mod files
  modpath := mods

  vpath %.mod $(modpath)
  vpath %.f90 $(srcpath) 
  vpath %.F90 $(srcpath)
  vpath %.c   $(srcpath)
  vpath %.cxx $(srcpath)
  vpath %.cpp $(srcpath)
  vpath %.h   $(srcpath)
  vpath %.hxx $(srcpath)
  vpath %.hpp $(srcpath)
  vpath %.py  $(srcpath)

  vpath %.mk  $(srcpath)

  fflags := $(fflags) $(modflag) $(modpath)

  include $(srcpath)/rules.mk

.SECONDEXPANSION:
%.f90.o : %.f90 | $(modpath)/ $$(@D)/
	$(fc) $(fflags) -c $< -o $@

.SECONDEXPANSION:
%.F90.o : %.F90 | $(modpath)/ $$(@D)/
	$(fc) $(fflags) -c $< -o $@

%.c.o : %.c
	$(cc) $(cflags) -c $< -o $@

%.cxx.o : %.cxx
	$(cxx) $(cxxflags) -c $< -o $@

all: $(exec)

%.a: $^
	ar rc $@ $^

# This could probably be done in a better way by defining a template for each language compiler/linker.
# Spaces in $(findstring) are significant!
  lselecta = $(if $(findstring .f90, $1)$(findstring .F90, $1), \
    $(fc) $(fflags), \
    $(if $(findstring .cxx, $1)$(findstring .cpp, $1), \
    $(cxx) $(cxxflags), \
    $(if $(findstring .c, $1), \
    $(cc) $(cflags), \
    $(error Unable to choose language compiler for target "$@" from the extensions of its sources) \
  ))) $1 $(ldflags) -o $@

%.x: $^
	$(call lselecta, $^)

# This is for executables lacking the .x extension but distinguished by virtue of being in bin/
.SECONDEXPANSION:
bin/%: $$^ | bin/
	$(call lselecta, $^)

%/:
	mkdir -p $@



# flags.mk.ref: $(mkfpath)/flags.mk
flags.mk.ref: flags.mk
	cp $^ $@
# clean:
# 	rm -rf $(exec) $(objs) $(modpath)
clean:
	rm -rf $(filter-out $(bldpath)/flags.mk.ref,$(wildcard $(bldpath)/*))

defgoal: all flags.mk.ref

#.INTERMEDIATE:
.DEFAULT_GOAL := defgoal
.PHONY: all
.PRECIOUS: %/
# DO NOT REMOVE THIS! It keeps away some silly autogenerated rules which may even ruin the sources.
.SUFFIXES:

endif








